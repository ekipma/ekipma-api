// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: proto/errors.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Errors int32

const (
	Errors_UNKNOWN_ERR      Errors = 0
	Errors_VER_ERR          Errors = 1
	Errors_REQ_PARAM_ERR    Errors = 2
	Errors_SAVE_ERR         Errors = 3
	Errors_SHORT_PASSWD_ERR Errors = 4
	Errors_RATE_LIMIT_ERR   Errors = 5
	Errors_SEND_ERR         Errors = 6
	Errors_RECV_ERR         Errors = 7
	// field
	Errors_REQUIRED_ERR  Errors = 8
	Errors_MIN_LEN_ERR   Errors = 9
	Errors_MAX_LEN_ERR   Errors = 10
	Errors_TITLE_LEN_ERR Errors = 11
	Errors_E164_ERR      Errors = 12
	Errors_EMAIL_ERR     Errors = 13
	// otp
	Errors_OTP_EXPIRED_ERR         Errors = 14
	Errors_OTP_NOTSENT_EXPIRED_ERR Errors = 15
	Errors_OTP_REGISTER_EXISTS_ERR Errors = 16
	Errors_OTP_CANT_CHECK_ERR      Errors = 17
	Errors_SMS_CANT_SEND_REG_ERR   Errors = 18
	// auth
	Errors_AUTH_401_ERR       Errors = 19
	Errors_COULDNT_HASH_ERR   Errors = 20
	Errors_GENERATE_TOKEN_ERR Errors = 21
	Errors_WRONG_PASSWD_ERR   Errors = 22
	Errors_TOKEN_EXP_ERR      Errors = 23
	// token
	Errors_TOKEN_NOT_PROVIDED_ERR Errors = 24
	Errors_TOKEN_PARSE_ERR        Errors = 25
	Errors_TOKEN_INVALID_ERR      Errors = 26
	Errors_TOKEN_USER_404_ERR     Errors = 27
	// user
	Errors_USER_CREATE_ERR           Errors = 28
	Errors_USER_CREATE_DUPLICATE_ERR Errors = 29
	Errors_USER_UPDATE_ERR           Errors = 30
	Errors_USER_404_ERR              Errors = 31
	Errors_USER_MOBILE_404_ERR       Errors = 32
	Errors_USER_FRIENDS_ERR          Errors = 33
	Errors_INVITER_404_ERR           Errors = 34
	Errors_FRIEND_ADD_ERR            Errors = 35
	Errors_FRIENDS_ADD_ERR           Errors = 36
	Errors_FRIENDS_COUNT_ERR         Errors = 37
	Errors_FRIENDS_COUNT_P_ERR       Errors = 38
	Errors_FRIEND_REM_ERR            Errors = 39
	Errors_FRIEND_ALREADY_ADDED_ERR  Errors = 40
	Errors_PRIMARY_WALLET_SET_ERR    Errors = 41
	Errors_WALLET_VALID_ERR          Errors = 42
	Errors_WALLET_GET_ERR            Errors = 43
	Errors_WALLET_SET_ERR            Errors = 44
	Errors_TX_FETCH_ERR              Errors = 45
	Errors_TX_404_ERR                Errors = 46
	Errors_TX_SENDER_ERR             Errors = 47
	Errors_TX_RECEIVER_ERR           Errors = 48
	Errors_TX_LOW_PRICE_ERR          Errors = 49
	Errors_TX_EXP_ERR                Errors = 50
	Errors_HASH_EMPTY_ERR            Errors = 51
	Errors_PRICES_FETCH_ERR          Errors = 52
	// file
	Errors_FILE_TOO_LARGE_ERR Errors = 53
	Errors_FILE_BT_EXPECT_ERR Errors = 54
	Errors_FILE_TYPE_ERR      Errors = 55
	// rec
	Errors_TOO_FEW_ASSES_ERR    Errors = 56
	Errors_TOO_MANY_ASSES_ERR   Errors = 57
	Errors_REC_DEL_DEADLINE_ERR Errors = 58
	Errors_REC_DEL_404_ERR      Errors = 59
	// pay
	Errors_PAY_CREATE_ERR Errors = 60
	Errors_PAY_SPLIT_ERR  Errors = 61
	Errors_PAY_GET_ERR    Errors = 62
	Errors_PAY_REM_ERR    Errors = 63
	// turn
	Errors_TURN_CREATE_ERR    Errors = 64
	Errors_TURN_GET_ERR       Errors = 65
	Errors_TURN_REM_ERR       Errors = 66
	Errors_TURN_404_ERR       Errors = 67
	Errors_TURN_NOT_YOURS_ERR Errors = 68
	// plan
	Errors_PLAN_CREATE_ERR Errors = 69
	Errors_PLAN_GET_ERR    Errors = 70
	Errors_PLAN_REM_ERR    Errors = 71
)

// Enum value maps for Errors.
var (
	Errors_name = map[int32]string{
		0:  "UNKNOWN_ERR",
		1:  "VER_ERR",
		2:  "REQ_PARAM_ERR",
		3:  "SAVE_ERR",
		4:  "SHORT_PASSWD_ERR",
		5:  "RATE_LIMIT_ERR",
		6:  "SEND_ERR",
		7:  "RECV_ERR",
		8:  "REQUIRED_ERR",
		9:  "MIN_LEN_ERR",
		10: "MAX_LEN_ERR",
		11: "TITLE_LEN_ERR",
		12: "E164_ERR",
		13: "EMAIL_ERR",
		14: "OTP_EXPIRED_ERR",
		15: "OTP_NOTSENT_EXPIRED_ERR",
		16: "OTP_REGISTER_EXISTS_ERR",
		17: "OTP_CANT_CHECK_ERR",
		18: "SMS_CANT_SEND_REG_ERR",
		19: "AUTH_401_ERR",
		20: "COULDNT_HASH_ERR",
		21: "GENERATE_TOKEN_ERR",
		22: "WRONG_PASSWD_ERR",
		23: "TOKEN_EXP_ERR",
		24: "TOKEN_NOT_PROVIDED_ERR",
		25: "TOKEN_PARSE_ERR",
		26: "TOKEN_INVALID_ERR",
		27: "TOKEN_USER_404_ERR",
		28: "USER_CREATE_ERR",
		29: "USER_CREATE_DUPLICATE_ERR",
		30: "USER_UPDATE_ERR",
		31: "USER_404_ERR",
		32: "USER_MOBILE_404_ERR",
		33: "USER_FRIENDS_ERR",
		34: "INVITER_404_ERR",
		35: "FRIEND_ADD_ERR",
		36: "FRIENDS_ADD_ERR",
		37: "FRIENDS_COUNT_ERR",
		38: "FRIENDS_COUNT_P_ERR",
		39: "FRIEND_REM_ERR",
		40: "FRIEND_ALREADY_ADDED_ERR",
		41: "PRIMARY_WALLET_SET_ERR",
		42: "WALLET_VALID_ERR",
		43: "WALLET_GET_ERR",
		44: "WALLET_SET_ERR",
		45: "TX_FETCH_ERR",
		46: "TX_404_ERR",
		47: "TX_SENDER_ERR",
		48: "TX_RECEIVER_ERR",
		49: "TX_LOW_PRICE_ERR",
		50: "TX_EXP_ERR",
		51: "HASH_EMPTY_ERR",
		52: "PRICES_FETCH_ERR",
		53: "FILE_TOO_LARGE_ERR",
		54: "FILE_BT_EXPECT_ERR",
		55: "FILE_TYPE_ERR",
		56: "TOO_FEW_ASSES_ERR",
		57: "TOO_MANY_ASSES_ERR",
		58: "REC_DEL_DEADLINE_ERR",
		59: "REC_DEL_404_ERR",
		60: "PAY_CREATE_ERR",
		61: "PAY_SPLIT_ERR",
		62: "PAY_GET_ERR",
		63: "PAY_REM_ERR",
		64: "TURN_CREATE_ERR",
		65: "TURN_GET_ERR",
		66: "TURN_REM_ERR",
		67: "TURN_404_ERR",
		68: "TURN_NOT_YOURS_ERR",
		69: "PLAN_CREATE_ERR",
		70: "PLAN_GET_ERR",
		71: "PLAN_REM_ERR",
	}
	Errors_value = map[string]int32{
		"UNKNOWN_ERR":               0,
		"VER_ERR":                   1,
		"REQ_PARAM_ERR":             2,
		"SAVE_ERR":                  3,
		"SHORT_PASSWD_ERR":          4,
		"RATE_LIMIT_ERR":            5,
		"SEND_ERR":                  6,
		"RECV_ERR":                  7,
		"REQUIRED_ERR":              8,
		"MIN_LEN_ERR":               9,
		"MAX_LEN_ERR":               10,
		"TITLE_LEN_ERR":             11,
		"E164_ERR":                  12,
		"EMAIL_ERR":                 13,
		"OTP_EXPIRED_ERR":           14,
		"OTP_NOTSENT_EXPIRED_ERR":   15,
		"OTP_REGISTER_EXISTS_ERR":   16,
		"OTP_CANT_CHECK_ERR":        17,
		"SMS_CANT_SEND_REG_ERR":     18,
		"AUTH_401_ERR":              19,
		"COULDNT_HASH_ERR":          20,
		"GENERATE_TOKEN_ERR":        21,
		"WRONG_PASSWD_ERR":          22,
		"TOKEN_EXP_ERR":             23,
		"TOKEN_NOT_PROVIDED_ERR":    24,
		"TOKEN_PARSE_ERR":           25,
		"TOKEN_INVALID_ERR":         26,
		"TOKEN_USER_404_ERR":        27,
		"USER_CREATE_ERR":           28,
		"USER_CREATE_DUPLICATE_ERR": 29,
		"USER_UPDATE_ERR":           30,
		"USER_404_ERR":              31,
		"USER_MOBILE_404_ERR":       32,
		"USER_FRIENDS_ERR":          33,
		"INVITER_404_ERR":           34,
		"FRIEND_ADD_ERR":            35,
		"FRIENDS_ADD_ERR":           36,
		"FRIENDS_COUNT_ERR":         37,
		"FRIENDS_COUNT_P_ERR":       38,
		"FRIEND_REM_ERR":            39,
		"FRIEND_ALREADY_ADDED_ERR":  40,
		"PRIMARY_WALLET_SET_ERR":    41,
		"WALLET_VALID_ERR":          42,
		"WALLET_GET_ERR":            43,
		"WALLET_SET_ERR":            44,
		"TX_FETCH_ERR":              45,
		"TX_404_ERR":                46,
		"TX_SENDER_ERR":             47,
		"TX_RECEIVER_ERR":           48,
		"TX_LOW_PRICE_ERR":          49,
		"TX_EXP_ERR":                50,
		"HASH_EMPTY_ERR":            51,
		"PRICES_FETCH_ERR":          52,
		"FILE_TOO_LARGE_ERR":        53,
		"FILE_BT_EXPECT_ERR":        54,
		"FILE_TYPE_ERR":             55,
		"TOO_FEW_ASSES_ERR":         56,
		"TOO_MANY_ASSES_ERR":        57,
		"REC_DEL_DEADLINE_ERR":      58,
		"REC_DEL_404_ERR":           59,
		"PAY_CREATE_ERR":            60,
		"PAY_SPLIT_ERR":             61,
		"PAY_GET_ERR":               62,
		"PAY_REM_ERR":               63,
		"TURN_CREATE_ERR":           64,
		"TURN_GET_ERR":              65,
		"TURN_REM_ERR":              66,
		"TURN_404_ERR":              67,
		"TURN_NOT_YOURS_ERR":        68,
		"PLAN_CREATE_ERR":           69,
		"PLAN_GET_ERR":              70,
		"PLAN_REM_ERR":              71,
	}
)

func (x Errors) Enum() *Errors {
	p := new(Errors)
	*p = x
	return p
}

func (x Errors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Errors) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[0].Descriptor()
}

func (Errors) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[0]
}

func (x Errors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Errors.Descriptor instead.
func (Errors) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{0}
}

var File_proto_errors_proto protoreflect.FileDescriptor

var file_proto_errors_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2a, 0xe0, 0x0b, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x51, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43,
	0x56, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4e,
	0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41,
	0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x31, 0x36, 0x34, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x54, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0e,
	0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0f, 0x12, 0x1b, 0x0a,
	0x17, 0x4f, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x54,
	0x50, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x12, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x34, 0x30, 0x31, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x13, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x15, 0x12, 0x14, 0x0a,
	0x10, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x1a, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x34, 0x30, 0x34,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x1c, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x1e, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x34, 0x30, 0x34, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x1f, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x34, 0x30, 0x34, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x21,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x34, 0x30, 0x34, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x24, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x26, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x27, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x28,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x29, 0x12, 0x14, 0x0a, 0x10,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x2c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x58,
	0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x2d, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x58, 0x5f, 0x34, 0x30, 0x34, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x2e, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x58, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x2f, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0x30, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x58, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x31, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x58,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x32, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x33, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x52, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0x34, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x35, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0x36, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x37, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4f, 0x5f, 0x46,
	0x45, 0x57, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x38, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x39, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x5f, 0x44, 0x45,
	0x4c, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3a,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x43, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x34, 0x30, 0x34, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x3b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59,
	0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3d, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x41, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3e, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3f, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x40, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x45,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x42, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x55, 0x52, 0x4e, 0x5f,
	0x34, 0x30, 0x34, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x44, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x46, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x47, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f,
	0x67, 0x6f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_errors_proto_rawDescOnce sync.Once
	file_proto_errors_proto_rawDescData = file_proto_errors_proto_rawDesc
)

func file_proto_errors_proto_rawDescGZIP() []byte {
	file_proto_errors_proto_rawDescOnce.Do(func() {
		file_proto_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_errors_proto_rawDescData)
	})
	return file_proto_errors_proto_rawDescData
}

var file_proto_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_errors_proto_goTypes = []interface{}{
	(Errors)(0), // 0: ekipma.api.errors.Errors
}
var file_proto_errors_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_errors_proto_init() }
func file_proto_errors_proto_init() {
	if File_proto_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_errors_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_errors_proto_goTypes,
		DependencyIndexes: file_proto_errors_proto_depIdxs,
		EnumInfos:         file_proto_errors_proto_enumTypes,
	}.Build()
	File_proto_errors_proto = out.File
	file_proto_errors_proto_rawDesc = nil
	file_proto_errors_proto_goTypes = nil
	file_proto_errors_proto_depIdxs = nil
}
