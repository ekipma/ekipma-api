// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: protos/pay.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayServiceClient is the client API for PayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayServiceClient interface {
	CreatePays(ctx context.Context, in *PayInput, opts ...grpc.CallOption) (PayService_CreatePaysClient, error)
	GetPays(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PayService_GetPaysClient, error)
	GetRecentPays(ctx context.Context, in *RecentInput, opts ...grpc.CallOption) (PayService_GetRecentPaysClient, error)
	UpdatePay(ctx context.Context, in *PayUpdateInput, opts ...grpc.CallOption) (*Pay, error)
	RemovePay(ctx context.Context, in *IdInput, opts ...grpc.CallOption) (*BoolOutput, error)
}

type payServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayServiceClient(cc grpc.ClientConnInterface) PayServiceClient {
	return &payServiceClient{cc}
}

func (c *payServiceClient) CreatePays(ctx context.Context, in *PayInput, opts ...grpc.CallOption) (PayService_CreatePaysClient, error) {
	stream, err := c.cc.NewStream(ctx, &PayService_ServiceDesc.Streams[0], "/ekipma.api.pay.PayService/CreatePays", opts...)
	if err != nil {
		return nil, err
	}
	x := &payServiceCreatePaysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PayService_CreatePaysClient interface {
	Recv() (*Pay, error)
	grpc.ClientStream
}

type payServiceCreatePaysClient struct {
	grpc.ClientStream
}

func (x *payServiceCreatePaysClient) Recv() (*Pay, error) {
	m := new(Pay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *payServiceClient) GetPays(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PayService_GetPaysClient, error) {
	stream, err := c.cc.NewStream(ctx, &PayService_ServiceDesc.Streams[1], "/ekipma.api.pay.PayService/GetPays", opts...)
	if err != nil {
		return nil, err
	}
	x := &payServiceGetPaysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PayService_GetPaysClient interface {
	Recv() (*Pay, error)
	grpc.ClientStream
}

type payServiceGetPaysClient struct {
	grpc.ClientStream
}

func (x *payServiceGetPaysClient) Recv() (*Pay, error) {
	m := new(Pay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *payServiceClient) GetRecentPays(ctx context.Context, in *RecentInput, opts ...grpc.CallOption) (PayService_GetRecentPaysClient, error) {
	stream, err := c.cc.NewStream(ctx, &PayService_ServiceDesc.Streams[2], "/ekipma.api.pay.PayService/GetRecentPays", opts...)
	if err != nil {
		return nil, err
	}
	x := &payServiceGetRecentPaysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PayService_GetRecentPaysClient interface {
	Recv() (*Pay, error)
	grpc.ClientStream
}

type payServiceGetRecentPaysClient struct {
	grpc.ClientStream
}

func (x *payServiceGetRecentPaysClient) Recv() (*Pay, error) {
	m := new(Pay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *payServiceClient) UpdatePay(ctx context.Context, in *PayUpdateInput, opts ...grpc.CallOption) (*Pay, error) {
	out := new(Pay)
	err := c.cc.Invoke(ctx, "/ekipma.api.pay.PayService/UpdatePay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) RemovePay(ctx context.Context, in *IdInput, opts ...grpc.CallOption) (*BoolOutput, error) {
	out := new(BoolOutput)
	err := c.cc.Invoke(ctx, "/ekipma.api.pay.PayService/RemovePay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServiceServer is the server API for PayService service.
// All implementations must embed UnimplementedPayServiceServer
// for forward compatibility
type PayServiceServer interface {
	CreatePays(*PayInput, PayService_CreatePaysServer) error
	GetPays(*Empty, PayService_GetPaysServer) error
	GetRecentPays(*RecentInput, PayService_GetRecentPaysServer) error
	UpdatePay(context.Context, *PayUpdateInput) (*Pay, error)
	RemovePay(context.Context, *IdInput) (*BoolOutput, error)
	mustEmbedUnimplementedPayServiceServer()
}

// UnimplementedPayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayServiceServer struct {
}

func (UnimplementedPayServiceServer) CreatePays(*PayInput, PayService_CreatePaysServer) error {
	return status.Errorf(codes.Unimplemented, "method CreatePays not implemented")
}
func (UnimplementedPayServiceServer) GetPays(*Empty, PayService_GetPaysServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPays not implemented")
}
func (UnimplementedPayServiceServer) GetRecentPays(*RecentInput, PayService_GetRecentPaysServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRecentPays not implemented")
}
func (UnimplementedPayServiceServer) UpdatePay(context.Context, *PayUpdateInput) (*Pay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePay not implemented")
}
func (UnimplementedPayServiceServer) RemovePay(context.Context, *IdInput) (*BoolOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePay not implemented")
}
func (UnimplementedPayServiceServer) mustEmbedUnimplementedPayServiceServer() {}

// UnsafePayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServiceServer will
// result in compilation errors.
type UnsafePayServiceServer interface {
	mustEmbedUnimplementedPayServiceServer()
}

func RegisterPayServiceServer(s grpc.ServiceRegistrar, srv PayServiceServer) {
	s.RegisterService(&PayService_ServiceDesc, srv)
}

func _PayService_CreatePays_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PayInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PayServiceServer).CreatePays(m, &payServiceCreatePaysServer{stream})
}

type PayService_CreatePaysServer interface {
	Send(*Pay) error
	grpc.ServerStream
}

type payServiceCreatePaysServer struct {
	grpc.ServerStream
}

func (x *payServiceCreatePaysServer) Send(m *Pay) error {
	return x.ServerStream.SendMsg(m)
}

func _PayService_GetPays_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PayServiceServer).GetPays(m, &payServiceGetPaysServer{stream})
}

type PayService_GetPaysServer interface {
	Send(*Pay) error
	grpc.ServerStream
}

type payServiceGetPaysServer struct {
	grpc.ServerStream
}

func (x *payServiceGetPaysServer) Send(m *Pay) error {
	return x.ServerStream.SendMsg(m)
}

func _PayService_GetRecentPays_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecentInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PayServiceServer).GetRecentPays(m, &payServiceGetRecentPaysServer{stream})
}

type PayService_GetRecentPaysServer interface {
	Send(*Pay) error
	grpc.ServerStream
}

type payServiceGetRecentPaysServer struct {
	grpc.ServerStream
}

func (x *payServiceGetRecentPaysServer) Send(m *Pay) error {
	return x.ServerStream.SendMsg(m)
}

func _PayService_UpdatePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).UpdatePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ekipma.api.pay.PayService/UpdatePay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).UpdatePay(ctx, req.(*PayUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_RemovePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).RemovePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ekipma.api.pay.PayService/RemovePay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).RemovePay(ctx, req.(*IdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PayService_ServiceDesc is the grpc.ServiceDesc for PayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ekipma.api.pay.PayService",
	HandlerType: (*PayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePay",
			Handler:    _PayService_UpdatePay_Handler,
		},
		{
			MethodName: "RemovePay",
			Handler:    _PayService_RemovePay_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreatePays",
			Handler:       _PayService_CreatePays_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPays",
			Handler:       _PayService_GetPays_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRecentPays",
			Handler:       _PayService_GetRecentPays_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/pay.proto",
}
