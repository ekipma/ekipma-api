// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: protos/plan.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanServiceClient is the client API for PlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanServiceClient interface {
	CreatePlan(ctx context.Context, in *PlanInput, opts ...grpc.CallOption) (*Plan, error)
	RecentPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PlanService_RecentPlansClient, error)
	DeletePlan(ctx context.Context, in *Last, opts ...grpc.CallOption) (*Empty, error)
}

type planServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanServiceClient(cc grpc.ClientConnInterface) PlanServiceClient {
	return &planServiceClient{cc}
}

func (c *planServiceClient) CreatePlan(ctx context.Context, in *PlanInput, opts ...grpc.CallOption) (*Plan, error) {
	out := new(Plan)
	err := c.cc.Invoke(ctx, "/ekipma.api.plan.PlanService/CreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) RecentPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PlanService_RecentPlansClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlanService_ServiceDesc.Streams[0], "/ekipma.api.plan.PlanService/RecentPlans", opts...)
	if err != nil {
		return nil, err
	}
	x := &planServiceRecentPlansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlanService_RecentPlansClient interface {
	Recv() (*Plan, error)
	grpc.ClientStream
}

type planServiceRecentPlansClient struct {
	grpc.ClientStream
}

func (x *planServiceRecentPlansClient) Recv() (*Plan, error) {
	m := new(Plan)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *planServiceClient) DeletePlan(ctx context.Context, in *Last, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ekipma.api.plan.PlanService/DeletePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServiceServer is the server API for PlanService service.
// All implementations must embed UnimplementedPlanServiceServer
// for forward compatibility
type PlanServiceServer interface {
	CreatePlan(context.Context, *PlanInput) (*Plan, error)
	RecentPlans(*Empty, PlanService_RecentPlansServer) error
	DeletePlan(context.Context, *Last) (*Empty, error)
	mustEmbedUnimplementedPlanServiceServer()
}

// UnimplementedPlanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanServiceServer struct {
}

func (UnimplementedPlanServiceServer) CreatePlan(context.Context, *PlanInput) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedPlanServiceServer) RecentPlans(*Empty, PlanService_RecentPlansServer) error {
	return status.Errorf(codes.Unimplemented, "method RecentPlans not implemented")
}
func (UnimplementedPlanServiceServer) DeletePlan(context.Context, *Last) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
}
func (UnimplementedPlanServiceServer) mustEmbedUnimplementedPlanServiceServer() {}

// UnsafePlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServiceServer will
// result in compilation errors.
type UnsafePlanServiceServer interface {
	mustEmbedUnimplementedPlanServiceServer()
}

func RegisterPlanServiceServer(s grpc.ServiceRegistrar, srv PlanServiceServer) {
	s.RegisterService(&PlanService_ServiceDesc, srv)
}

func _PlanService_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ekipma.api.plan.PlanService/CreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).CreatePlan(ctx, req.(*PlanInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_RecentPlans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlanServiceServer).RecentPlans(m, &planServiceRecentPlansServer{stream})
}

type PlanService_RecentPlansServer interface {
	Send(*Plan) error
	grpc.ServerStream
}

type planServiceRecentPlansServer struct {
	grpc.ServerStream
}

func (x *planServiceRecentPlansServer) Send(m *Plan) error {
	return x.ServerStream.SendMsg(m)
}

func _PlanService_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Last)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ekipma.api.plan.PlanService/DeletePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).DeletePlan(ctx, req.(*Last))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanService_ServiceDesc is the grpc.ServiceDesc for PlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ekipma.api.plan.PlanService",
	HandlerType: (*PlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlan",
			Handler:    _PlanService_CreatePlan_Handler,
		},
		{
			MethodName: "DeletePlan",
			Handler:    _PlanService_DeletePlan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecentPlans",
			Handler:       _PlanService_RecentPlans_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/plan.proto",
}
