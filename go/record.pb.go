// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: proto/record.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordType int32

const (
	RecordType_RecordTypeUnkown RecordType = 0
	RecordType_RecordTypePay    RecordType = 1
	RecordType_RecordTypeTurn   RecordType = 2
	RecordType_RecordTypePlan   RecordType = 3
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "RecordTypeUnkown",
		1: "RecordTypePay",
		2: "RecordTypeTurn",
		3: "RecordTypePlan",
	}
	RecordType_value = map[string]int32{
		"RecordTypeUnkown": 0,
		"RecordTypePay":    1,
		"RecordTypeTurn":   2,
		"RecordTypePlan":   3,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_record_proto_enumTypes[0].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_proto_record_proto_enumTypes[0]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{0}
}

type PayType int32

const (
	PayType_PayTypeUnkown PayType = 0
	PayType_PayTypeNormal PayType = 1
	PayType_PayTypeRepay  PayType = 2
)

// Enum value maps for PayType.
var (
	PayType_name = map[int32]string{
		0: "PayTypeUnkown",
		1: "PayTypeNormal",
		2: "PayTypeRepay",
	}
	PayType_value = map[string]int32{
		"PayTypeUnkown": 0,
		"PayTypeNormal": 1,
		"PayTypeRepay":  2,
	}
)

func (x PayType) Enum() *PayType {
	p := new(PayType)
	*p = x
	return p
}

func (x PayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_record_proto_enumTypes[1].Descriptor()
}

func (PayType) Type() protoreflect.EnumType {
	return &file_proto_record_proto_enumTypes[1]
}

func (x PayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayType.Descriptor instead.
func (PayType) EnumDescriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{1}
}

type PayUnit int32

const (
	PayUnit_PayUnitUnkown PayUnit = 0
	PayUnit_USD           PayUnit = 1
	PayUnit_IRTT          PayUnit = 2
	PayUnit_EUR           PayUnit = 3
	PayUnit_POND          PayUnit = 4
)

// Enum value maps for PayUnit.
var (
	PayUnit_name = map[int32]string{
		0: "PayUnitUnkown",
		1: "USD",
		2: "IRTT",
		3: "EUR",
		4: "POND",
	}
	PayUnit_value = map[string]int32{
		"PayUnitUnkown": 0,
		"USD":           1,
		"IRTT":          2,
		"EUR":           3,
		"POND":          4,
	}
)

func (x PayUnit) Enum() *PayUnit {
	p := new(PayUnit)
	*p = x
	return p
}

func (x PayUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_record_proto_enumTypes[2].Descriptor()
}

func (PayUnit) Type() protoreflect.EnumType {
	return &file_proto_record_proto_enumTypes[2]
}

func (x PayUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayUnit.Descriptor instead.
func (PayUnit) EnumDescriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{2}
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gorm - output
	Id        uint64                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deletedAt,proto3,oneof" json:"deletedAt,omitempty"`
	// rec
	Title     string   `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Desc      string   `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	Author    uint64   `protobuf:"varint,9,opt,name=author,proto3" json:"author,omitempty"`
	Assignee  uint64   `protobuf:"varint,10,opt,name=assignee,proto3" json:"assignee,omitempty"` // output
	Assignees []uint64 `protobuf:"varint,11,rep,packed,name=assignees,proto3" json:"assignees,omitempty"`
	Group     uint64   `protobuf:"varint,12,opt,name=group,proto3" json:"group,omitempty"`
	Private   bool     `protobuf:"varint,13,opt,name=private,proto3" json:"private,omitempty"`
	// value
	Type RecordType `protobuf:"varint,14,opt,name=type,proto3,enum=ekipma.api.record.RecordType" json:"type,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Record_Pay
	//	*Record_Turn
	//	*Record_Plan
	Value isRecord_Value `protobuf_oneof:"value"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Record) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Record) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Record) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Record) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Record) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Record) GetAuthor() uint64 {
	if x != nil {
		return x.Author
	}
	return 0
}

func (x *Record) GetAssignee() uint64 {
	if x != nil {
		return x.Assignee
	}
	return 0
}

func (x *Record) GetAssignees() []uint64 {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *Record) GetGroup() uint64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *Record) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Record) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_RecordTypeUnkown
}

func (m *Record) GetValue() isRecord_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Record) GetPay() *Pay {
	if x, ok := x.GetValue().(*Record_Pay); ok {
		return x.Pay
	}
	return nil
}

func (x *Record) GetTurn() *Turn {
	if x, ok := x.GetValue().(*Record_Turn); ok {
		return x.Turn
	}
	return nil
}

func (x *Record) GetPlan() *Plan {
	if x, ok := x.GetValue().(*Record_Plan); ok {
		return x.Plan
	}
	return nil
}

type isRecord_Value interface {
	isRecord_Value()
}

type Record_Pay struct {
	Pay *Pay `protobuf:"bytes,15,opt,name=pay,proto3,oneof"`
}

type Record_Turn struct {
	Turn *Turn `protobuf:"bytes,16,opt,name=turn,proto3,oneof"`
}

type Record_Plan struct {
	Plan *Plan `protobuf:"bytes,17,opt,name=plan,proto3,oneof"`
}

func (*Record_Pay) isRecord_Value() {}

func (*Record_Turn) isRecord_Value() {}

func (*Record_Plan) isRecord_Value() {}

type Pay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    float64  `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
	PayUnit  PayUnit  `protobuf:"varint,2,opt,name=payUnit,proto3,enum=ekipma.api.record.PayUnit" json:"payUnit,omitempty"`
	PayType  PayType  `protobuf:"varint,3,opt,name=payType,proto3,enum=ekipma.api.record.PayType" json:"payType,omitempty"`
	RepaidBy uint64   `protobuf:"varint,4,opt,name=repaidBy,proto3" json:"repaidBy,omitempty"`      // output
	ToRepay  []uint64 `protobuf:"varint,5,rep,packed,name=toRepay,proto3" json:"toRepay,omitempty"` // input
}

func (x *Pay) Reset() {
	*x = Pay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pay) ProtoMessage() {}

func (x *Pay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pay.ProtoReflect.Descriptor instead.
func (*Pay) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{1}
}

func (x *Pay) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Pay) GetPayUnit() PayUnit {
	if x != nil {
		return x.PayUnit
	}
	return PayUnit_PayUnitUnkown
}

func (x *Pay) GetPayType() PayType {
	if x != nil {
		return x.PayType
	}
	return PayType_PayTypeUnkown
}

func (x *Pay) GetRepaidBy() uint64 {
	if x != nil {
		return x.RepaidBy
	}
	return 0
}

func (x *Pay) GetToRepay() []uint64 {
	if x != nil {
		return x.ToRepay
	}
	return nil
}

type Turn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iter   uint32 `protobuf:"varint,1,opt,name=iter,proto3" json:"iter,omitempty"`     // increasing - output
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"` // in hours
}

func (x *Turn) Reset() {
	*x = Turn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Turn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Turn) ProtoMessage() {}

func (x *Turn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Turn.ProtoReflect.Descriptor instead.
func (*Turn) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{2}
}

func (x *Turn) GetIter() uint32 {
	if x != nil {
		return x.Iter
	}
	return 0
}

func (x *Turn) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Lat  string `protobuf:"bytes,2,opt,name=lat,proto3" json:"lat,omitempty"`
	Long string `protobuf:"bytes,3,opt,name=long,proto3" json:"long,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *Location) GetLong() string {
	if x != nil {
		return x.Long
	}
	return ""
}

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DueAt    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=dueAt,proto3" json:"dueAt,omitempty"` // due date
	Location *Location              `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{4}
}

func (x *Plan) GetDueAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DueAt
	}
	return nil
}

func (x *Plan) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// conventionally has size of 20 reocrds per chunk
type RecordsChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *Chunk    `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Reocrds []*Record `protobuf:"bytes,2,rep,name=reocrds,proto3" json:"reocrds,omitempty"`
}

func (x *RecordsChunk) Reset() {
	*x = RecordsChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsChunk) ProtoMessage() {}

func (x *RecordsChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsChunk.ProtoReflect.Descriptor instead.
func (*RecordsChunk) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{5}
}

func (x *RecordsChunk) GetInfo() *Chunk {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RecordsChunk) GetReocrds() []*Record {
	if x != nil {
		return x.Reocrds
	}
	return nil
}

type IntegrityInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last uint64 `protobuf:"varint,1,opt,name=last,proto3" json:"last,omitempty"` // id of the last record
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`  // checksum - hash of all ids
}

func (x *IntegrityInput) Reset() {
	*x = IntegrityInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrityInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrityInput) ProtoMessage() {}

func (x *IntegrityInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrityInput.ProtoReflect.Descriptor instead.
func (*IntegrityInput) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{6}
}

func (x *IntegrityInput) GetLast() uint64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *IntegrityInput) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type IntegrityOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok  bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Ids []uint64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"` // ids of all items (if not ok)
}

func (x *IntegrityOutput) Reset() {
	*x = IntegrityOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrityOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrityOutput) ProtoMessage() {}

func (x *IntegrityOutput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrityOutput.ProtoReflect.Descriptor instead.
func (*IntegrityOutput) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{7}
}

func (x *IntegrityOutput) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *IntegrityOutput) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Lost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` // ids of lost items
}

func (x *Lost) Reset() {
	*x = Lost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lost) ProtoMessage() {}

func (x *Lost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lost.ProtoReflect.Descriptor instead.
func (*Lost) Descriptor() ([]byte, []int) {
	return file_proto_record_proto_rawDescGZIP(), []int{8}
}

func (x *Lost) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_proto_record_proto protoreflect.FileDescriptor

var file_proto_record_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x04, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x61, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x03, 0x50,
	0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6b, 0x69, 0x70,
	0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x42, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x42, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x79, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x75,
	0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x44,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x6e, 0x67, 0x22, 0x71, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x05,
	0x64, 0x75, 0x65, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x64, 0x75, 0x65, 0x41, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x6f, 0x63, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x6f, 0x63, 0x72, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x33, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x18, 0x0a, 0x04, 0x4c, 0x6f, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x2a, 0x5d, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x10, 0x03, 0x2a, 0x41, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x6b, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x52, 0x54, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4e, 0x44, 0x10, 0x04, 0x32, 0xe3, 0x04, 0x0a, 0x0d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x65,
	0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70,
	0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0f, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x4c, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01,
	0x12, 0x43, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x12,
	0x1a, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6b,
	0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x61, 0x79, 0x12, 0x1a, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x18, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x1a, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x67, 0x6f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_record_proto_rawDescOnce sync.Once
	file_proto_record_proto_rawDescData = file_proto_record_proto_rawDesc
)

func file_proto_record_proto_rawDescGZIP() []byte {
	file_proto_record_proto_rawDescOnce.Do(func() {
		file_proto_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_record_proto_rawDescData)
	})
	return file_proto_record_proto_rawDescData
}

var file_proto_record_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_record_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_record_proto_goTypes = []interface{}{
	(RecordType)(0),               // 0: ekipma.api.record.RecordType
	(PayType)(0),                  // 1: ekipma.api.record.PayType
	(PayUnit)(0),                  // 2: ekipma.api.record.PayUnit
	(*Record)(nil),                // 3: ekipma.api.record.Record
	(*Pay)(nil),                   // 4: ekipma.api.record.Pay
	(*Turn)(nil),                  // 5: ekipma.api.record.Turn
	(*Location)(nil),              // 6: ekipma.api.record.Location
	(*Plan)(nil),                  // 7: ekipma.api.record.Plan
	(*RecordsChunk)(nil),          // 8: ekipma.api.record.RecordsChunk
	(*IntegrityInput)(nil),        // 9: ekipma.api.record.IntegrityInput
	(*IntegrityOutput)(nil),       // 10: ekipma.api.record.IntegrityOutput
	(*Lost)(nil),                  // 11: ekipma.api.record.Lost
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*Chunk)(nil),                 // 13: ekipma.api.common.Chunk
	(*Last)(nil),                  // 14: ekipma.api.common.Last
	(*IdInput)(nil),               // 15: ekipma.api.common.IdInput
	(*Empty)(nil),                 // 16: ekipma.api.common.Empty
}
var file_proto_record_proto_depIdxs = []int32{
	12, // 0: ekipma.api.record.Record.createdAt:type_name -> google.protobuf.Timestamp
	12, // 1: ekipma.api.record.Record.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 2: ekipma.api.record.Record.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 3: ekipma.api.record.Record.type:type_name -> ekipma.api.record.RecordType
	4,  // 4: ekipma.api.record.Record.pay:type_name -> ekipma.api.record.Pay
	5,  // 5: ekipma.api.record.Record.turn:type_name -> ekipma.api.record.Turn
	7,  // 6: ekipma.api.record.Record.plan:type_name -> ekipma.api.record.Plan
	2,  // 7: ekipma.api.record.Pay.payUnit:type_name -> ekipma.api.record.PayUnit
	1,  // 8: ekipma.api.record.Pay.payType:type_name -> ekipma.api.record.PayType
	12, // 9: ekipma.api.record.Plan.dueAt:type_name -> google.protobuf.Timestamp
	6,  // 10: ekipma.api.record.Plan.location:type_name -> ekipma.api.record.Location
	13, // 11: ekipma.api.record.RecordsChunk.info:type_name -> ekipma.api.common.Chunk
	3,  // 12: ekipma.api.record.RecordsChunk.reocrds:type_name -> ekipma.api.record.Record
	3,  // 13: ekipma.api.record.RecordService.CreateRecords:input_type -> ekipma.api.record.Record
	14, // 14: ekipma.api.record.RecordService.RecentRecords:input_type -> ekipma.api.common.Last
	15, // 15: ekipma.api.record.RecordService.DeleteRecord:input_type -> ekipma.api.common.IdInput
	9,  // 16: ekipma.api.record.RecordService.VerifyIntegrity:input_type -> ekipma.api.record.IntegrityInput
	11, // 17: ekipma.api.record.RecordService.LostRecords:input_type -> ekipma.api.record.Lost
	15, // 18: ekipma.api.record.RecordService.AcceptRepay:input_type -> ekipma.api.common.IdInput
	15, // 19: ekipma.api.record.RecordService.RejectRepay:input_type -> ekipma.api.common.IdInput
	15, // 20: ekipma.api.record.RecordService.SubmitTurn:input_type -> ekipma.api.common.IdInput
	8,  // 21: ekipma.api.record.RecordService.CreateRecords:output_type -> ekipma.api.record.RecordsChunk
	8,  // 22: ekipma.api.record.RecordService.RecentRecords:output_type -> ekipma.api.record.RecordsChunk
	16, // 23: ekipma.api.record.RecordService.DeleteRecord:output_type -> ekipma.api.common.Empty
	10, // 24: ekipma.api.record.RecordService.VerifyIntegrity:output_type -> ekipma.api.record.IntegrityOutput
	8,  // 25: ekipma.api.record.RecordService.LostRecords:output_type -> ekipma.api.record.RecordsChunk
	16, // 26: ekipma.api.record.RecordService.AcceptRepay:output_type -> ekipma.api.common.Empty
	16, // 27: ekipma.api.record.RecordService.RejectRepay:output_type -> ekipma.api.common.Empty
	3,  // 28: ekipma.api.record.RecordService.SubmitTurn:output_type -> ekipma.api.record.Record
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_record_proto_init() }
func file_proto_record_proto_init() {
	if File_proto_record_proto != nil {
		return
	}
	file_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Turn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrityInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrityOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_record_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Record_Pay)(nil),
		(*Record_Turn)(nil),
		(*Record_Plan)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_record_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_record_proto_goTypes,
		DependencyIndexes: file_proto_record_proto_depIdxs,
		EnumInfos:         file_proto_record_proto_enumTypes,
		MessageInfos:      file_proto_record_proto_msgTypes,
	}.Build()
	File_proto_record_proto = out.File
	file_proto_record_proto_rawDesc = nil
	file_proto_record_proto_goTypes = nil
	file_proto_record_proto_depIdxs = nil
}
