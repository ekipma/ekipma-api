// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: proto/user.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserRole int32

const (
	UserRole_UserRoleUnkown UserRole = 0
	UserRole_UserRoleNormal UserRole = 1
	UserRole_UserRoleOpr    UserRole = 2
	UserRole_UserRoleAdmin  UserRole = 3
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "UserRoleUnkown",
		1: "UserRoleNormal",
		2: "UserRoleOpr",
		3: "UserRoleAdmin",
	}
	UserRole_value = map[string]int32{
		"UserRoleUnkown": 0,
		"UserRoleNormal": 1,
		"UserRoleOpr":    2,
		"UserRoleAdmin":  3,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_user_proto_enumTypes[0].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_proto_user_proto_enumTypes[0]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{0}
}

type OtpOpr int32

const (
	OtpOpr_OtpNone           OtpOpr = 0
	OtpOpr_OtpRegister       OtpOpr = 1
	OtpOpr_OtpForgetPassword OtpOpr = 2
	OtpOpr_OtpChangeMobile   OtpOpr = 3
)

// Enum value maps for OtpOpr.
var (
	OtpOpr_name = map[int32]string{
		0: "OtpNone",
		1: "OtpRegister",
		2: "OtpForgetPassword",
		3: "OtpChangeMobile",
	}
	OtpOpr_value = map[string]int32{
		"OtpNone":           0,
		"OtpRegister":       1,
		"OtpForgetPassword": 2,
		"OtpChangeMobile":   3,
	}
)

func (x OtpOpr) Enum() *OtpOpr {
	p := new(OtpOpr)
	*p = x
	return p
}

func (x OtpOpr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtpOpr) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_user_proto_enumTypes[1].Descriptor()
}

func (OtpOpr) Type() protoreflect.EnumType {
	return &file_proto_user_proto_enumTypes[1]
}

func (x OtpOpr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OtpOpr.Descriptor instead.
func (OtpOpr) EnumDescriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{1}
}

type WalletType int32

const (
	WalletType_CUSTOM WalletType = 0
	WalletType_XNO    WalletType = 1
	WalletType_TRX    WalletType = 2
	WalletType_DOGE   WalletType = 3
	WalletType_ADA    WalletType = 4
)

// Enum value maps for WalletType.
var (
	WalletType_name = map[int32]string{
		0: "CUSTOM",
		1: "XNO",
		2: "TRX",
		3: "DOGE",
		4: "ADA",
	}
	WalletType_value = map[string]int32{
		"CUSTOM": 0,
		"XNO":    1,
		"TRX":    2,
		"DOGE":   3,
		"ADA":    4,
	}
)

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_user_proto_enumTypes[2].Descriptor()
}

func (WalletType) Type() protoreflect.EnumType {
	return &file_proto_user_proto_enumTypes[2]
}

func (x WalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletType.Descriptor instead.
func (WalletType) EnumDescriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{2}
}

type AssetType int32

const (
	AssetType_AssetUnkown      AssetType = 0
	AssetType_AssetAvatarFrame AssetType = 1 // user avatar frame
	AssetType_AssetCardSkin    AssetType = 2 // record-card, friend-card, notif-card
	AssetType_AssetNotifSound  AssetType = 3 // sound of the notifs made by user
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "AssetUnkown",
		1: "AssetAvatarFrame",
		2: "AssetCardSkin",
		3: "AssetNotifSound",
	}
	AssetType_value = map[string]int32{
		"AssetUnkown":      0,
		"AssetAvatarFrame": 1,
		"AssetCardSkin":    2,
		"AssetNotifSound":  3,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_user_proto_enumTypes[3].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_proto_user_proto_enumTypes[3]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{3}
}

type AvatarFrame int32

const (
	AvatarFrame_AvatarFrameNone  AvatarFrame = 0
	AvatarFrame_AvatarFrameCrown AvatarFrame = 1
	AvatarFrame_AvatarFramePoo   AvatarFrame = 2
	AvatarFrame_AvatarFrameHorn  AvatarFrame = 3
	AvatarFrame_AvatarFrameNoise AvatarFrame = 4 // shader
	AvatarFrame_AvatarFrameWave  AvatarFrame = 5 // shader
	AvatarFrame_AvatarFrameFire  AvatarFrame = 6 // just image for now... maybe shader in the future
)

// Enum value maps for AvatarFrame.
var (
	AvatarFrame_name = map[int32]string{
		0: "AvatarFrameNone",
		1: "AvatarFrameCrown",
		2: "AvatarFramePoo",
		3: "AvatarFrameHorn",
		4: "AvatarFrameNoise",
		5: "AvatarFrameWave",
		6: "AvatarFrameFire",
	}
	AvatarFrame_value = map[string]int32{
		"AvatarFrameNone":  0,
		"AvatarFrameCrown": 1,
		"AvatarFramePoo":   2,
		"AvatarFrameHorn":  3,
		"AvatarFrameNoise": 4,
		"AvatarFrameWave":  5,
		"AvatarFrameFire":  6,
	}
)

func (x AvatarFrame) Enum() *AvatarFrame {
	p := new(AvatarFrame)
	*p = x
	return p
}

func (x AvatarFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_user_proto_enumTypes[4].Descriptor()
}

func (AvatarFrame) Type() protoreflect.EnumType {
	return &file_proto_user_proto_enumTypes[4]
}

func (x AvatarFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarFrame.Descriptor instead.
func (AvatarFrame) EnumDescriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{4}
}

type CardSkin int32

const (
	CardSkin_CardSkinNone      CardSkin = 0
	CardSkin_CardSkinBubbles   CardSkin = 1
	CardSkin_CardSkinSpongeBob CardSkin = 2
	CardSkin_CardSkinPatrik    CardSkin = 3
	CardSkin_CardSkinRickMorty CardSkin = 4
	CardSkin_CardSkinBlack     CardSkin = 5
)

// Enum value maps for CardSkin.
var (
	CardSkin_name = map[int32]string{
		0: "CardSkinNone",
		1: "CardSkinBubbles",
		2: "CardSkinSpongeBob",
		3: "CardSkinPatrik",
		4: "CardSkinRickMorty",
		5: "CardSkinBlack",
	}
	CardSkin_value = map[string]int32{
		"CardSkinNone":      0,
		"CardSkinBubbles":   1,
		"CardSkinSpongeBob": 2,
		"CardSkinPatrik":    3,
		"CardSkinRickMorty": 4,
		"CardSkinBlack":     5,
	}
)

func (x CardSkin) Enum() *CardSkin {
	p := new(CardSkin)
	*p = x
	return p
}

func (x CardSkin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSkin) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_user_proto_enumTypes[5].Descriptor()
}

func (CardSkin) Type() protoreflect.EnumType {
	return &file_proto_user_proto_enumTypes[5]
}

func (x CardSkin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSkin.Descriptor instead.
func (CardSkin) EnumDescriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{5}
}

type NotifSound int32

const (
	NotifSound_NotifSoundNone    NotifSound = 0
	NotifSound_NotifSoundDefault NotifSound = 1 // receiver default mobile rigntone
	NotifSound_NotifSoundFart    NotifSound = 2
	NotifSound_NotifSOundYamete  NotifSound = 3
)

// Enum value maps for NotifSound.
var (
	NotifSound_name = map[int32]string{
		0: "NotifSoundNone",
		1: "NotifSoundDefault",
		2: "NotifSoundFart",
		3: "NotifSOundYamete",
	}
	NotifSound_value = map[string]int32{
		"NotifSoundNone":    0,
		"NotifSoundDefault": 1,
		"NotifSoundFart":    2,
		"NotifSOundYamete":  3,
	}
)

func (x NotifSound) Enum() *NotifSound {
	p := new(NotifSound)
	*p = x
	return p
}

func (x NotifSound) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifSound) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_user_proto_enumTypes[6].Descriptor()
}

func (NotifSound) Type() protoreflect.EnumType {
	return &file_proto_user_proto_enumTypes[6]
}

func (x NotifSound) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifSound.Descriptor instead.
func (NotifSound) EnumDescriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{6}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gorm
	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// user
	Mobile        string                 `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`         // editable
	Email         string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`       // editable
	Public        bool                   `protobuf:"varint,7,opt,name=public,proto3" json:"public,omitempty"`    // editable
	Code          string                 `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`         // renewable - referral code
	PhotoURL      string                 `protobuf:"bytes,9,opt,name=photoURL,proto3" json:"photoURL,omitempty"` // from uuid
	Friends       []uint64               `protobuf:"varint,10,rep,packed,name=friends,proto3" json:"friends,omitempty"`
	Inviter       uint64                 `protobuf:"varint,11,opt,name=inviter,proto3" json:"inviter,omitempty"`
	Role          UserRole               `protobuf:"varint,12,opt,name=role,proto3,enum=ekipma.api.user.UserRole" json:"role,omitempty"`
	PremiumTill   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=premiumTill,proto3" json:"premiumTill,omitempty"`
	Wallets       []*Wallet              `protobuf:"bytes,14,rep,name=wallets,proto3" json:"wallets,omitempty"`             // crud
	PrimaryWallet string                 `protobuf:"bytes,15,opt,name=primaryWallet,proto3" json:"primaryWallet,omitempty"` // game
	// amount of the tokens (ma) that user holds
	Tokens uint64 `protobuf:"varint,16,opt,name=tokens,proto3" json:"tokens,omitempty"`
	// TODO achievements achieved by the user
	Achs []uint64 `protobuf:"varint,17,rep,packed,name=achs,proto3" json:"achs,omitempty"`
	// list of all assets that the user is holding
	Assets []*Asset `protobuf:"bytes,18,rep,name=assets,proto3" json:"assets,omitempty"`
	// editable - user also likes to accept token as debt repay
	AcceptToken bool `protobuf:"varint,19,opt,name=acceptToken,proto3" json:"acceptToken,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *User) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *User) GetPhotoURL() string {
	if x != nil {
		return x.PhotoURL
	}
	return ""
}

func (x *User) GetFriends() []uint64 {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *User) GetInviter() uint64 {
	if x != nil {
		return x.Inviter
	}
	return 0
}

func (x *User) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_UserRoleUnkown
}

func (x *User) GetPremiumTill() *timestamppb.Timestamp {
	if x != nil {
		return x.PremiumTill
	}
	return nil
}

func (x *User) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *User) GetPrimaryWallet() string {
	if x != nil {
		return x.PrimaryWallet
	}
	return ""
}

func (x *User) GetTokens() uint64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *User) GetAchs() []uint64 {
	if x != nil {
		return x.Achs
	}
	return nil
}

func (x *User) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *User) GetAcceptToken() bool {
	if x != nil {
		return x.AcceptToken
	}
	return false
}

type SendOtpInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"` // used for sms
	Opr    OtpOpr `protobuf:"varint,2,opt,name=opr,proto3,enum=ekipma.api.user.OtpOpr" json:"opr,omitempty"`
}

func (x *SendOtpInput) Reset() {
	*x = SendOtpInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOtpInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOtpInput) ProtoMessage() {}

func (x *SendOtpInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOtpInput.ProtoReflect.Descriptor instead.
func (*SendOtpInput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{1}
}

func (x *SendOtpInput) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *SendOtpInput) GetOpr() OtpOpr {
	if x != nil {
		return x.Opr
	}
	return OtpOpr_OtpNone
}

type VerifyOtpInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` // validation
}

func (x *VerifyOtpInput) Reset() {
	*x = VerifyOtpInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOtpInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOtpInput) ProtoMessage() {}

func (x *VerifyOtpInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOtpInput.ProtoReflect.Descriptor instead.
func (*VerifyOtpInput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyOtpInput) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *VerifyOtpInput) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type VerifyOtpOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpToken string `protobuf:"bytes,1,opt,name=otpToken,proto3" json:"otpToken,omitempty"` // salts mobile
}

func (x *VerifyOtpOutput) Reset() {
	*x = VerifyOtpOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOtpOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOtpOutput) ProtoMessage() {}

func (x *VerifyOtpOutput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOtpOutput.ProtoReflect.Descriptor instead.
func (*VerifyOtpOutput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyOtpOutput) GetOtpToken() string {
	if x != nil {
		return x.OtpToken
	}
	return ""
}

// auth
type RegisterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpToken string `protobuf:"bytes,1,opt,name=otpToken,proto3" json:"otpToken,omitempty"` // has mobile
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Inviter  uint64 `protobuf:"varint,4,opt,name=inviter,proto3" json:"inviter,omitempty"`
	Email    string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *RegisterInput) Reset() {
	*x = RegisterInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInput) ProtoMessage() {}

func (x *RegisterInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInput.ProtoReflect.Descriptor instead.
func (*RegisterInput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterInput) GetOtpToken() string {
	if x != nil {
		return x.OtpToken
	}
	return ""
}

func (x *RegisterInput) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterInput) GetInviter() uint64 {
	if x != nil {
		return x.Inviter
	}
	return 0
}

func (x *RegisterInput) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type LoginInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile   string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginInput) Reset() {
	*x = LoginInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginInput) ProtoMessage() {}

func (x *LoginInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginInput.ProtoReflect.Descriptor instead.
func (*LoginInput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{5}
}

func (x *LoginInput) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *LoginInput) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AuthOutput) Reset() {
	*x = AuthOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOutput) ProtoMessage() {}

func (x *AuthOutput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOutput.ProtoReflect.Descriptor instead.
func (*AuthOutput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{6}
}

func (x *AuthOutput) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthOutput) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type Friend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	PhotoURL    string                 `protobuf:"bytes,4,opt,name=photoURL,proto3" json:"photoURL,omitempty"`
	PremiumTill *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=premiumTill,proto3" json:"premiumTill,omitempty"`
	Wallets     []*Wallet              `protobuf:"bytes,6,rep,name=wallets,proto3" json:"wallets,omitempty"` // NOTICE send only public wallets
}

func (x *Friend) Reset() {
	*x = Friend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friend) ProtoMessage() {}

func (x *Friend) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friend.ProtoReflect.Descriptor instead.
func (*Friend) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{7}
}

func (x *Friend) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Friend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Friend) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Friend) GetPhotoURL() string {
	if x != nil {
		return x.PhotoURL
	}
	return ""
}

func (x *Friend) GetPremiumTill() *timestamppb.Timestamp {
	if x != nil {
		return x.PremiumTill
	}
	return nil
}

func (x *Friend) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type MobilesChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *Chunk   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Mobiles []string `protobuf:"bytes,2,rep,name=mobiles,proto3" json:"mobiles,omitempty"` // 100 mobiles per chunk
}

func (x *MobilesChunk) Reset() {
	*x = MobilesChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilesChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilesChunk) ProtoMessage() {}

func (x *MobilesChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilesChunk.ProtoReflect.Descriptor instead.
func (*MobilesChunk) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{8}
}

func (x *MobilesChunk) GetInfo() *Chunk {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MobilesChunk) GetMobiles() []string {
	if x != nil {
		return x.Mobiles
	}
	return nil
}

type FriendsChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *Chunk    `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Friends []*Friend `protobuf:"bytes,2,rep,name=friends,proto3" json:"friends,omitempty"`
}

func (x *FriendsChunk) Reset() {
	*x = FriendsChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendsChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendsChunk) ProtoMessage() {}

func (x *FriendsChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendsChunk.ProtoReflect.Descriptor instead.
func (*FriendsChunk) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{9}
}

func (x *FriendsChunk) GetInfo() *Chunk {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FriendsChunk) GetFriends() []*Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`       // - output
	Owner   uint64     `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"` // - output
	Type    WalletType `protobuf:"varint,3,opt,name=type,proto3,enum=ekipma.api.user.WalletType" json:"type,omitempty"`
	Addr    string     `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Public  bool       `protobuf:"varint,5,opt,name=public,proto3" json:"public,omitempty"`   // visible to other users
	Primary bool       `protobuf:"varint,6,opt,name=primary,proto3" json:"primary,omitempty"` // sets as primary - input
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{10}
}

func (x *Wallet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Wallet) GetOwner() uint64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *Wallet) GetType() WalletType {
	if x != nil {
		return x.Type
	}
	return WalletType_CUSTOM
}

func (x *Wallet) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Wallet) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *Wallet) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

type UpdateWalletOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *User   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`   // updated user with his new wallet
	WDist    *Wallet `protobuf:"bytes,2,opt,name=wDist,proto3" json:"wDist,omitempty"` // send my related wallet address
	Price    float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	NeedHash bool    `protobuf:"varint,4,opt,name=needHash,proto3" json:"needHash,omitempty"` // whether the method needs tx hash
}

func (x *UpdateWalletOutput) Reset() {
	*x = UpdateWalletOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletOutput) ProtoMessage() {}

func (x *UpdateWalletOutput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletOutput.ProtoReflect.Descriptor instead.
func (*UpdateWalletOutput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateWalletOutput) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateWalletOutput) GetWDist() *Wallet {
	if x != nil {
		return x.WDist
	}
	return nil
}

func (x *UpdateWalletOutput) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateWalletOutput) GetNeedHash() bool {
	if x != nil {
		return x.NeedHash
	}
	return false
}

type CheckPremiumInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type WalletType `protobuf:"varint,1,opt,name=type,proto3,enum=ekipma.api.user.WalletType" json:"type,omitempty"`
	Hash string     `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *CheckPremiumInput) Reset() {
	*x = CheckPremiumInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPremiumInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPremiumInput) ProtoMessage() {}

func (x *CheckPremiumInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPremiumInput.ProtoReflect.Descriptor instead.
func (*CheckPremiumInput) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{12}
}

func (x *CheckPremiumInput) GetType() WalletType {
	if x != nil {
		return x.Type
	}
	return WalletType_CUSTOM
}

func (x *CheckPremiumInput) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   AssetType `protobuf:"varint,1,opt,name=type,proto3,enum=ekipma.api.user.AssetType" json:"type,omitempty"`
	Active bool      `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"` // only one asset of a type is active
	// Types that are assignable to Value:
	//
	//	*Asset_AvatarFrame
	//	*Asset_CardSkin
	//	*Asset_NotifSound
	Value isAsset_Value `protobuf_oneof:"value"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_proto_user_proto_rawDescGZIP(), []int{13}
}

func (x *Asset) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_AssetUnkown
}

func (x *Asset) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (m *Asset) GetValue() isAsset_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Asset) GetAvatarFrame() AvatarFrame {
	if x, ok := x.GetValue().(*Asset_AvatarFrame); ok {
		return x.AvatarFrame
	}
	return AvatarFrame_AvatarFrameNone
}

func (x *Asset) GetCardSkin() CardSkin {
	if x, ok := x.GetValue().(*Asset_CardSkin); ok {
		return x.CardSkin
	}
	return CardSkin_CardSkinNone
}

func (x *Asset) GetNotifSound() NotifSound {
	if x, ok := x.GetValue().(*Asset_NotifSound); ok {
		return x.NotifSound
	}
	return NotifSound_NotifSoundNone
}

type isAsset_Value interface {
	isAsset_Value()
}

type Asset_AvatarFrame struct {
	AvatarFrame AvatarFrame `protobuf:"varint,3,opt,name=avatarFrame,proto3,enum=ekipma.api.user.AvatarFrame,oneof"`
}

type Asset_CardSkin struct {
	CardSkin CardSkin `protobuf:"varint,4,opt,name=cardSkin,proto3,enum=ekipma.api.user.CardSkin,oneof"`
}

type Asset_NotifSound struct {
	NotifSound NotifSound `protobuf:"varint,5,opt,name=notifSound,proto3,enum=ekipma.api.user.NotifSound,oneof"`
}

func (*Asset_AvatarFrame) isAsset_Value() {}

func (*Asset_CardSkin) isAsset_Value() {}

func (*Asset_NotifSound) isAsset_Value() {}

var File_proto_user_proto protoreflect.FileDescriptor

var file_proto_user_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x05, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x6c,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x6c, 0x6c,
	0x12, 0x31, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x68, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x04, 0x61, 0x63, 0x68, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x74, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65,
	0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4f,
	0x74, 0x70, 0x4f, 0x70, 0x72, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x3c, 0x0a, 0x0e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4f, 0x74, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x74, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x74, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x74, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x74, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x40, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4d, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6b, 0x69, 0x70,
	0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x54, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x54, 0x69, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x6f, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x22, 0xa5, 0x01, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x77,
	0x44, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6b, 0x69,
	0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x05, 0x77, 0x44, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x58, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x92, 0x02, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65,
	0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x6b, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x56, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x70, 0x72, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x06, 0x4f, 0x74, 0x70, 0x4f, 0x70, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x74, 0x70, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x74,
	0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x74, 0x70, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x74, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x03, 0x2a, 0x3d, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52,
	0x58, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x47, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x44, 0x41, 0x10, 0x04, 0x2a, 0x5a, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x03, 0x2a, 0xa1, 0x01, 0x0a, 0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6f, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x48, 0x6f, 0x72, 0x6e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x57, 0x61, 0x76, 0x65, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x10, 0x06, 0x2a, 0x86, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x6b, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x62, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x50, 0x61, 0x74,
	0x72, 0x69, 0x6b, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6e, 0x52, 0x69, 0x63, 0x6b, 0x4d, 0x6f, 0x72, 0x74, 0x79, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x05, 0x2a,
	0x61, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x72, 0x74, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x4f, 0x75, 0x6e, 0x64, 0x59, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x10, 0x03, 0x32, 0xbc, 0x06, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70, 0x12, 0x1d, 0x2e,
	0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4f, 0x74, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x65,
	0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4f, 0x74, 0x70, 0x12, 0x1f, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74,
	0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f,
	0x74, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x65, 0x6b, 0x69,
	0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6b, 0x69,
	0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x15, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1d,
	0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1d, 0x2e,
	0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x18,
	0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x65, 0x6b, 0x69, 0x70,
	0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x18, 0x2e,
	0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x1a, 0x23, 0x2e,
	0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x12, 0x22, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6b, 0x69, 0x70, 0x6d,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x67, 0x6f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_user_proto_rawDescOnce sync.Once
	file_proto_user_proto_rawDescData = file_proto_user_proto_rawDesc
)

func file_proto_user_proto_rawDescGZIP() []byte {
	file_proto_user_proto_rawDescOnce.Do(func() {
		file_proto_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_user_proto_rawDescData)
	})
	return file_proto_user_proto_rawDescData
}

var file_proto_user_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_user_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_user_proto_goTypes = []interface{}{
	(UserRole)(0),                 // 0: ekipma.api.user.UserRole
	(OtpOpr)(0),                   // 1: ekipma.api.user.OtpOpr
	(WalletType)(0),               // 2: ekipma.api.user.WalletType
	(AssetType)(0),                // 3: ekipma.api.user.AssetType
	(AvatarFrame)(0),              // 4: ekipma.api.user.AvatarFrame
	(CardSkin)(0),                 // 5: ekipma.api.user.CardSkin
	(NotifSound)(0),               // 6: ekipma.api.user.NotifSound
	(*User)(nil),                  // 7: ekipma.api.user.User
	(*SendOtpInput)(nil),          // 8: ekipma.api.user.SendOtpInput
	(*VerifyOtpInput)(nil),        // 9: ekipma.api.user.VerifyOtpInput
	(*VerifyOtpOutput)(nil),       // 10: ekipma.api.user.VerifyOtpOutput
	(*RegisterInput)(nil),         // 11: ekipma.api.user.RegisterInput
	(*LoginInput)(nil),            // 12: ekipma.api.user.LoginInput
	(*AuthOutput)(nil),            // 13: ekipma.api.user.AuthOutput
	(*Friend)(nil),                // 14: ekipma.api.user.Friend
	(*MobilesChunk)(nil),          // 15: ekipma.api.user.MobilesChunk
	(*FriendsChunk)(nil),          // 16: ekipma.api.user.FriendsChunk
	(*Wallet)(nil),                // 17: ekipma.api.user.Wallet
	(*UpdateWalletOutput)(nil),    // 18: ekipma.api.user.UpdateWalletOutput
	(*CheckPremiumInput)(nil),     // 19: ekipma.api.user.CheckPremiumInput
	(*Asset)(nil),                 // 20: ekipma.api.user.Asset
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*Chunk)(nil),                 // 22: ekipma.api.common.Chunk
	(*Empty)(nil),                 // 23: ekipma.api.common.Empty
	(*IdInput)(nil),               // 24: ekipma.api.common.IdInput
}
var file_proto_user_proto_depIdxs = []int32{
	21, // 0: ekipma.api.user.User.createdAt:type_name -> google.protobuf.Timestamp
	21, // 1: ekipma.api.user.User.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 2: ekipma.api.user.User.role:type_name -> ekipma.api.user.UserRole
	21, // 3: ekipma.api.user.User.premiumTill:type_name -> google.protobuf.Timestamp
	17, // 4: ekipma.api.user.User.wallets:type_name -> ekipma.api.user.Wallet
	20, // 5: ekipma.api.user.User.assets:type_name -> ekipma.api.user.Asset
	1,  // 6: ekipma.api.user.SendOtpInput.opr:type_name -> ekipma.api.user.OtpOpr
	7,  // 7: ekipma.api.user.AuthOutput.user:type_name -> ekipma.api.user.User
	21, // 8: ekipma.api.user.Friend.premiumTill:type_name -> google.protobuf.Timestamp
	17, // 9: ekipma.api.user.Friend.wallets:type_name -> ekipma.api.user.Wallet
	22, // 10: ekipma.api.user.MobilesChunk.info:type_name -> ekipma.api.common.Chunk
	22, // 11: ekipma.api.user.FriendsChunk.info:type_name -> ekipma.api.common.Chunk
	14, // 12: ekipma.api.user.FriendsChunk.friends:type_name -> ekipma.api.user.Friend
	2,  // 13: ekipma.api.user.Wallet.type:type_name -> ekipma.api.user.WalletType
	7,  // 14: ekipma.api.user.UpdateWalletOutput.user:type_name -> ekipma.api.user.User
	17, // 15: ekipma.api.user.UpdateWalletOutput.wDist:type_name -> ekipma.api.user.Wallet
	2,  // 16: ekipma.api.user.CheckPremiumInput.type:type_name -> ekipma.api.user.WalletType
	3,  // 17: ekipma.api.user.Asset.type:type_name -> ekipma.api.user.AssetType
	4,  // 18: ekipma.api.user.Asset.avatarFrame:type_name -> ekipma.api.user.AvatarFrame
	5,  // 19: ekipma.api.user.Asset.cardSkin:type_name -> ekipma.api.user.CardSkin
	6,  // 20: ekipma.api.user.Asset.notifSound:type_name -> ekipma.api.user.NotifSound
	8,  // 21: ekipma.api.user.UserService.SendOtp:input_type -> ekipma.api.user.SendOtpInput
	9,  // 22: ekipma.api.user.UserService.VerifyOtp:input_type -> ekipma.api.user.VerifyOtpInput
	11, // 23: ekipma.api.user.UserService.RegisterUser:input_type -> ekipma.api.user.RegisterInput
	12, // 24: ekipma.api.user.UserService.LoginUser:input_type -> ekipma.api.user.LoginInput
	7,  // 25: ekipma.api.user.UserService.UpdateUser:input_type -> ekipma.api.user.User
	15, // 26: ekipma.api.user.UserService.AddFriends:input_type -> ekipma.api.user.MobilesChunk
	23, // 27: ekipma.api.user.UserService.GetFriends:input_type -> ekipma.api.common.Empty
	24, // 28: ekipma.api.user.UserService.RemoveFriend:input_type -> ekipma.api.common.IdInput
	23, // 29: ekipma.api.user.UserService.GetWallets:input_type -> ekipma.api.common.Empty
	17, // 30: ekipma.api.user.UserService.UpdateWallet:input_type -> ekipma.api.user.Wallet
	19, // 31: ekipma.api.user.UserService.CheckPremium:input_type -> ekipma.api.user.CheckPremiumInput
	23, // 32: ekipma.api.user.UserService.SendOtp:output_type -> ekipma.api.common.Empty
	10, // 33: ekipma.api.user.UserService.VerifyOtp:output_type -> ekipma.api.user.VerifyOtpOutput
	13, // 34: ekipma.api.user.UserService.RegisterUser:output_type -> ekipma.api.user.AuthOutput
	13, // 35: ekipma.api.user.UserService.LoginUser:output_type -> ekipma.api.user.AuthOutput
	7,  // 36: ekipma.api.user.UserService.UpdateUser:output_type -> ekipma.api.user.User
	16, // 37: ekipma.api.user.UserService.AddFriends:output_type -> ekipma.api.user.FriendsChunk
	16, // 38: ekipma.api.user.UserService.GetFriends:output_type -> ekipma.api.user.FriendsChunk
	23, // 39: ekipma.api.user.UserService.RemoveFriend:output_type -> ekipma.api.common.Empty
	17, // 40: ekipma.api.user.UserService.GetWallets:output_type -> ekipma.api.user.Wallet
	18, // 41: ekipma.api.user.UserService.UpdateWallet:output_type -> ekipma.api.user.UpdateWalletOutput
	7,  // 42: ekipma.api.user.UserService.CheckPremium:output_type -> ekipma.api.user.User
	32, // [32:43] is the sub-list for method output_type
	21, // [21:32] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_user_proto_init() }
func file_proto_user_proto_init() {
	if File_proto_user_proto != nil {
		return
	}
	file_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOtpInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOtpInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOtpOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Friend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilesChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendsChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPremiumInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_user_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Asset_AvatarFrame)(nil),
		(*Asset_CardSkin)(nil),
		(*Asset_NotifSound)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_user_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_user_proto_goTypes,
		DependencyIndexes: file_proto_user_proto_depIdxs,
		EnumInfos:         file_proto_user_proto_enumTypes,
		MessageInfos:      file_proto_user_proto_msgTypes,
	}.Build()
	File_proto_user_proto = out.File
	file_proto_user_proto_rawDesc = nil
	file_proto_user_proto_goTypes = nil
	file_proto_user_proto_depIdxs = nil
}
