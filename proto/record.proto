syntax = "proto3";
package ekipma.api.record;

import "proto/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./go;pb";

service RecordService {
  // if -- Pay
  // for each assignee of pay-input an author<->assignee record would be made
  // if `author` field is defined transaction is reversed
  // if -- turn | plan
  // create only one record.
  // turn: if `assignee` field is not defined turn is assigned to `author`
  // plan: has no `assignee` field
  rpc CreateRecords(Record) returns (RecordsChunk);
  // get list of records ( created | updated | deleted ) after last-time-updated
  // where ( author | assignee | !pay & assignees )
  rpc RecentRecords(ekipma.api.common.Last) returns (stream RecordsChunk);
  rpc DeleteRecord(ekipma.api.common.IdInput) returns (ekipma.api.common.Empty);
  rpc VerifyIntegrity(IntegrityInput) returns (IntegrityOutput);
  rpc LostRecords(Lost) returns (stream RecordsChunk);
  // when repay record is accepted by friend
  // mark all related to-repay records as repaid
  rpc AcceptRepay(ekipma.api.common.IdInput) returns (ekipma.api.common.Empty);
  // when repay record is rejected by friend
  // delete the repay record
  rpc RejectRepay(ekipma.api.common.IdInput) returns (ekipma.api.common.Empty);
  // changes assignee to next person in the assignees list
  rpc SubmitTurn(ekipma.api.common.IdInput) returns (Record);
}

enum RecordType {
  RecordTypeUnkown = 0;
  RecordTypePay = 1;
  RecordTypeTurn = 2;
  RecordTypePlan = 3;
}

message Record {
  // gorm - output
  uint64 id = 2;
  google.protobuf.Timestamp createdAt = 3;
  google.protobuf.Timestamp updatedAt = 4;
  optional google.protobuf.Timestamp deletedAt = 5;
  // rec
  string title = 7;
  string desc = 8;
  uint64 author = 9;
  uint64 assignee = 10; // output
  repeated uint64 assignees = 11;
  uint64 group = 12;
  bool private = 13;
  // value
  RecordType type = 14;
  oneof value {
    Pay pay = 15;
    Turn turn = 16;
    Plan plan = 17;
  }
}

// pay

enum PayType {
  PayTypeUnkown = 0;
  PayTypeNormal = 1;
  PayTypeRepay = 2;
}

enum PayUnit {
  PayUnitUnkown = 0;
  USD = 1;
  IRTT = 2;
  EUR = 3;
  POND = 4;
}

message Pay {
  double total = 1;
  PayUnit payUnit = 2;
  PayType payType = 3;
  uint64 repaidBy = 4;         // output
  repeated uint64 toRepay = 5; // input
}

// turn

message Turn {
  uint32 iter = 1;   // increasing - output
  uint32 period = 2; // in hours
}

// plan

message Location {
  string name = 1;
  string lat = 2;
  string long = 3;
}

message Plan {
  google.protobuf.Timestamp dueAt = 1; // due date
  Location location = 2;
}

// Output

// conventionally has size of 20 reocrds per chunk
message RecordsChunk {
  ekipma.api.common.Chunk info = 1;
  repeated Record reocrds = 2;
}

// Integrity

message IntegrityInput {
  uint64 last = 1; // id of the last record
  string hash = 2; // checksum - hash of all ids
}

message IntegrityOutput {
  bool ok = 1;
  repeated uint64 ids = 2; // ids of all items (if not ok)
}

message Lost {
  repeated uint64 ids = 1; // ids of lost items
}