syntax = "proto3";
package ekipma.api.record;

import "proto/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./go;pb";

service RecordService {
  rpc CreateRecords(Record) returns (stream Record) {
    // if -- Pay
    // for each assignee of pay-input an author<->assignee record would be made
    // if `author` field is defined transaction is reversed
    // if -- turn | plan
    // create only one record.
    // turn: if `assignee` field is not defined turn is assigned to `author`
    // plan: has no `assignee` field
  }
  rpc RecentRecords(ekipma.api.common.Last) returns (stream Record) {
    /*
     get list of records ( created | updated | deleted ) after last-time-updated
     where ( pay ? ( assignee | author ) : ( assignees | author ) )
    */
  }
  rpc DeleteRecord(ekipma.api.common.IdInput) returns (ekipma.api.common.Empty);
  rpc VerifyIntegrity(IntegrityInput) returns (IntegrityOutput);
  rpc LostRecords(Lost) returns (stream Record);

  // -- turn --
  rpc SubmitTurn(ekipma.api.common.IdInput) returns (Record) {
    // changes assignee to next person in the assignees list
  }
}

enum RecordType {
  UnkownRecordType = 0;
  IsPay = 1;
  IsTurn = 2;
  IsPlan = 3;
}

message Record {
  ekipma.api.common.Chunk chunk = 1;

  // gorm - output
  uint64 id = 2;
  google.protobuf.Timestamp createdAt = 3;
  google.protobuf.Timestamp updatedAt = 4;
  bool deleted = 5;

  // rec
  string title = 6;
  string desc = 7;
  uint64 author = 8;
  uint64 assignee = 9; // output
  repeated uint64 assignees = 10;
  uint64 group = 11;
  bool private = 12;

  // value
  RecordType type = 13;
  oneof value {
    Pay pay = 14;
    Turn turn = 15;
    Plan plan = 16;
  }
}

// pay

enum PayType {
  UnknownPayType = 0;
  New = 1;
  Repay = 2;
}

enum PayUnit {
  UnknownPayUnit = 0;
  USD = 1;
  IRTT = 2;
  EUR = 3;
  POND = 4;
}

message Pay {
  double total = 1;
  PayUnit payUnit = 2;
  PayType payType = 3;
}

// turn

message Turn {
  uint32 iter = 1;   // increasing - output
  uint32 period = 2; // in hours
}

// plan

message Location {
  string name = 1;
  string lat = 2;
  string long = 3;
}

enum Sound {
  None = 0;
  Default = 1;
  Nature = 2;
  Yamete = 3; // can be used by premium users
}

message Plan {
  google.protobuf.Timestamp dueAt = 1; // due date
  Location location = 2;
  Sound sound = 3;
}

// Integrity

message IntegrityInput {
  uint64 last = 1; // id of the last record
  string hash = 2; // checksum - hash of all ids
}

message IntegrityOutput {
  bool ok = 1;
  repeated uint64 ids = 2; // ids of all items
}

message Lost {
  repeated uint64 ids = 1; // ids of lost items
}