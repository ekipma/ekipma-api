syntax = "proto3";
package ekipma.api.user;

import "proto/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./go;pb";

service UserService {
  // otp
  rpc SendOtp(OtpMobileInput) returns (ekipma.api.common.Empty) {
    // only sends otp to the mobile number in separate go routine
    // it has two types -> register and forget
    // if register -> check duplicate
  }
  rpc VerifyOtp(OtpCodeInput) returns (OtpOutput) {
    // validate otp code of the mobile number
    // generate a token for signing up
  }
  // auth
  rpc RegisterUser(RegisterInput) returns (AuthOutput) {
    // with the otp-token given attempt a register
    // generate access-token and send it
  }
  rpc LoginUser(LoginInput) returns (AuthOutput) {}
  // friend
  rpc AddFriends(stream MobilesChunk) returns (stream FriendsChunk);
  rpc GetFriends(ekipma.api.common.Empty) returns (stream FriendsChunk);
  rpc RemoveFriend(ekipma.api.common.IdInput) returns (ekipma.api.common.Empty);
  // wallet
  rpc GetWallets(ekipma.api.common.Empty) returns (stream Wallet) {
    // get wallets owned by user
  }
  rpc UpdateWallet(Wallet) returns (WalletOutput) {
    // based on type + owner -> update/set addr (unique)
    // based on type -> send my wallet of same type
    // wallet public is `false` by default (for premium)
    // but can be set as `public` or `primary` in account section
    // `primary` address is what others can copy from copy btn
  }
  // premium
  rpc CheckPremium(PremiumInput) returns (User) {
    // based on wallet type check purchase
    // if purchase correct -> 35d premium +
    // each friend 5d premium if not premium
  }
}

// user

enum UserRole {
  Unkown = 0;
  Normal = 1;
  Opr = 2;
  Admin = 3;
}

message User {
  // gorm
  uint64 id = 1;
  google.protobuf.Timestamp createdAt = 2;
  google.protobuf.Timestamp updatedAt = 3;
  // user
  string mobile = 4;
  string code = 5;
  string name = 6;
  string email = 7;
  string photoURL = 8;
  bool public = 9;
  repeated uint64 friends = 10;
  uint64 inviter = 11;
  UserRole role = 12;
  google.protobuf.Timestamp premiumTill = 13;
  repeated Wallet wallets = 14;
  uint64 primaryWallet = 15;
}

// otp
message OtpMobileInput {
  string mobile = 1; // used for sms
  bool register = 2; // if it is for register
}

message OtpCodeInput {
  string mobile = 1;
  string code = 2; // validation
}

message OtpOutput {
  string otpToken = 1; // salts mobile
}

// auth
message RegisterInput {
  string otpToken = 1; // has mobile
  string password = 2;
  string name = 3;
  uint64 inviter = 4;
  string email = 5;
}

message LoginInput {
  string mobile = 1;
  string password = 2;
}

message AuthOutput {
  string token = 1;
  User user = 2;
}

// friend - subtype of user with limited fields

message Friend {
  uint64 id = 1;
  string name = 2;
  string email = 3;
  string photoURL = 4;
  google.protobuf.Timestamp premiumTill = 5;
  repeated Wallet wallets = 6; // NOTICE send only public wallets
}

message MobilesChunk {
  ekipma.api.common.Chunk chunk = 1;
  repeated string mobiles = 2; // 100 mobiles per chunk
}

message FriendsChunk {
  ekipma.api.common.Chunk chunk = 1;
  repeated Friend friends = 2;
}

// wallets

enum WalletType {
  CUSTOM = 0;
  XNO = 1;
  TRX = 2;
  DOGE = 3;
  ADA = 4;
}

message Wallet {
  uint64 id = 1;    // - output
  uint64 owner = 2; // - output
  WalletType type = 3;
  string addr = 4;
  bool public = 5;  // visible to other users
  bool primary = 6; // sets as primary - input
}

message WalletOutput {
  User user = 1;    // updated user with his new wallet
  Wallet wDist = 2; // send my related wallet address
  float price = 3;
  bool needHash = 4; // whether the method needs tx hash
}

message PremiumInput {
  WalletType type = 1;
  string hash = 2;
}