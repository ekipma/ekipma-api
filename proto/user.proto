syntax = "proto3";
package ekipma.api.user;

import "proto/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./go;pb";

service UserService {
  // only sends otp to the mobile number in separate go routine
  // it has two types -> register and forget
  // if register -> check duplicate
  rpc SendOtp(SendOtpInput) returns (ekipma.api.common.Empty);
  // validate otp code of the mobile number
  // generate a token for signing up
  rpc VerifyOtp(VerifyOtpInput) returns (VerifyOtpOutput);
  // with the otp-token given attempt a register
  // generate access-token and send it
  rpc RegisterUser(RegisterInput) returns (AuthOutput);
  rpc LoginUser(LoginInput) returns (AuthOutput);
  // update only "name | email | public"
  rpc UpdateUser(User) returns (User);
  rpc AddFriends(stream MobilesChunk) returns (User);
  rpc RemoveFriend(ekipma.api.common.IdInput) returns (User);
  // based on type + owner -> update/set addr (unique)
  // based on type -> send my wallet of same type
  // wallet public is `false` by default (for premium)
  // but can be set as `public` or `primary` in account section
  // `primary` address is what others can copy from copy btn
  rpc UpdateWallet(Wallet) returns (User);
  // if wType = custom
  // creates a payment url for client
  // saves authority in a column in users table
  // client: opens link in browser
  // else: return related wDist based on wType
  rpc RequestPurchase(RequestPurchaseInput) returns (RequestPurchaseOutput);
  // check purchase and convert it to equivalent amount of tokens
  // update user tokens and return user
  rpc VerifyPurchase(VerifyPurchaseInput) returns (User);
  // reduce tokens based on play type and upgrade user's plan
  rpc UpgradePlan(UserPlan) returns (User);
  // reduce tokens based on asset type and add asset to user's assets
  rpc BuyAsset(Asset) returns (User);
  // reduce token from user and send to friend
  // also notify friend
  rpc SendToken(SendTokenInput) returns (User);
}

// user

message User {
  // gorm
  uint64 id = 1;
  google.protobuf.Timestamp createdAt = 2;
  google.protobuf.Timestamp updatedAt = 3;
  // user
  UserRole role = 4;
  string mobile = 5;
  string name = 6;      // editable
  string email = 7;     // editable
  bool public = 8;      // editable
  string code = 9;      // renewable - referral code
  string photoURL = 10; // from uuid
  uint64 inviter = 11;
  repeated Friend friends = 12; // output - populate from friend ids
  repeated Wallet wallets = 13; // output - populate from wallet ids
  Wallet mainWallet = 14;       // output - from primary wallet id
  UserPlan plan = 15;
  // amount of the tokens (ma) that user holds
  uint64 tokens = 16;
  // editable - user also likes to accept token as debt repay
  bool acceptToken = 17;
  // achievements achieved by the user
  repeated uint64 achs = 18;
  // list of all assets that the user is holding
  // parsed from user.assets string
  repeated Asset assets = 19;
}

enum UserRole {
  UserRoleUnkown = 0;
  UserRoleNormal = 1;
  UserRoleOpr = 2;
  UserRoleAdmin = 3;
}

// otp

enum OtpOpr {
  OtpNone = 0;
  OtpRegister = 1;
  OtpForgetPassword = 2;
  OtpChangeMobile = 3;
}

message SendOtpInput {
  string mobile = 1; // used for sms
  OtpOpr opr = 2;
}

message VerifyOtpInput {
  string mobile = 1;
  string code = 2; // validation
}

message VerifyOtpOutput {
  string otpToken = 1; // salts mobile
}

// auth

message RegisterInput {
  string otpToken = 1; // has mobile
  string password = 2;
  string name = 3;
  uint64 inviter = 4;
  string email = 5;
}

message LoginInput {
  string mobile = 1;
  string password = 2;
}

message AuthOutput {
  string token = 1;
  User user = 2;
}

// friend - subtype of user with limited fields

message Friend {
  uint64 id = 1;
  string name = 2;
  string email = 3;
  string photoURL = 4;
  UserPlan plan = 5;
  Wallet mainWallet = 6; // from primary wallet id
}

message MobilesChunk {
  ekipma.api.common.Chunk info = 1;
  repeated string mobiles = 2; // 100 mobiles per chunk
}

// wallets

enum WalletType {
  CUSTOM = 0;
  XNO = 1;
  TRX = 2;
  DOGE = 3;
  ADA = 4;
}

message Wallet {
  uint64 id = 1;    // - output
  uint64 owner = 2; // - output
  WalletType type = 3;
  string addr = 4;
  bool public = 5;  // visible to other users
  bool primary = 6; // input - sets as primary
}

message RequestPurchaseInput { uint64 walledID = 1; }

message RequestPurchaseOutput {
  Wallet wDist = 1;       // send my related wallet address
  float price = 2;        // actual price based on wType
  bool needHash = 3;      // whether the method needs tx hash
  string redirectURL = 4; // ignore other fields - open link in web
}

message VerifyPurchaseInput {
  WalletType type = 1;
  string hash = 2; // only needed for few types
}

// plan

message UserPlan {
  UserPlanType type = 1;
  google.protobuf.Timestamp expiresAt = 2; // outpu
}

enum UserPlanType {
  UserPlanNormal = 0;
  UserPlanPremium = 1;
  UserPlanGod = 2;
}

// game

message Asset {
  AssetType type = 1; // input
  string uuid = 3;    // unique id of the asset - convention
  // tokens necessary to unlock
  // least 1 token (prevent brute forcing)
  uint64 price = 4;
  string hash = 5; // input - checksum for type+uuid+price not to alter
  bool active = 2; // input - only one asset of a type is active
}

enum AssetType {
  AssetUnkown = 0;
  AssetAvatarFrame = 1; // user avatar frame
  AssetCardSkin = 2;    // record-card, friend-card, notif-card
  AssetNotifSound = 3;  // sound of the notifs made by user
}

message SendTokenInput {
  uint64 amount = 1;
  uint64 to = 2; // id of receiver
}