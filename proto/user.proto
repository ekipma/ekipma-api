syntax = "proto3";
package ekipma.api.user;

import "proto/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./go;pb";

service UserService {
  // otp
  rpc SendOtp(SendOtpInput) returns (ekipma.api.common.Empty) {
    // only sends otp to the mobile number in separate go routine
    // it has two types -> register and forget
    // if register -> check duplicate
  }
  rpc VerifyOtp(VerifyOtpInput) returns (VerifyOtpOutput) {
    // validate otp code of the mobile number
    // generate a token for signing up
  }
  // auth
  rpc RegisterUser(RegisterInput) returns (AuthOutput) {
    // with the otp-token given attempt a register
    // generate access-token and send it
  }
  rpc LoginUser(LoginInput) returns (AuthOutput) {}
  // direct update
  rpc UpdateUser(User) returns (User) {
    // update only "name | email | public"
  }
  // friend
  rpc AddFriends(stream MobilesChunk) returns (stream FriendsChunk);
  rpc GetFriends(ekipma.api.common.Empty) returns (stream FriendsChunk);
  rpc RemoveFriend(ekipma.api.common.IdInput) returns (ekipma.api.common.Empty);
  // wallet
  rpc GetWallets(ekipma.api.common.Empty) returns (stream Wallet) {
    // get wallets owned by user
  }
  rpc UpdateWallet(Wallet) returns (UpdateWalletOutput) {
    // based on type + owner -> update/set addr (unique)
    // based on type -> send my wallet of same type
    // wallet public is `false` by default (for premium)
    // but can be set as `public` or `primary` in account section
    // `primary` address is what others can copy from copy btn
  }
  // premium
  rpc CheckPremium(CheckPremiumInput) returns (User) {
    // based on wallet type check purchase
    // if purchase correct -> 35d premium +
    // each friend 5d premium if not premium
  }
}

// user

enum UserRole {
  UserRoleUnkown = 0;
  UserRoleNormal = 1;
  UserRoleOpr = 2;
  UserRoleAdmin = 3;
}

message User {
  // gorm
  uint64 id = 1;
  google.protobuf.Timestamp createdAt = 2;
  google.protobuf.Timestamp updatedAt = 3;
  // user
  string mobile = 4;
  string name = 5;     // editable
  string email = 6;    // editable
  bool public = 7;     // editable
  string code = 8;     // renewable - referral code
  string photoURL = 9; // from uuid
  repeated uint64 friends = 10;
  uint64 inviter = 11;
  UserRole role = 12;
  google.protobuf.Timestamp premiumTill = 13;
  repeated Wallet wallets = 14; // crud
  string primaryWallet = 15;
  // game
  /* amount of the tokens (ma) that user holds */
  uint64 tokens = 16;
  /* TODO achievements achieved by the user */
  repeated uint64 achs = 17;
  /* list of all assets that the user is holding */
  repeated Asset assets = 18;
  /* editable - user also likes to accept token as debt repay */
  bool acceptToken = 19;
}

// otp

enum OtpOpr {
  OtpNone = 0;
  OtpRegister = 1;
  OtpForgetPassword = 2;
  OtpChangeMobile = 3;
}

message SendOtpInput {
  string mobile = 1; // used for sms
  OtpOpr opr = 2;
}

message VerifyOtpInput {
  string mobile = 1;
  string code = 2; // validation
}

message VerifyOtpOutput {
  string otpToken = 1; // salts mobile
}

// auth
message RegisterInput {
  string otpToken = 1; // has mobile
  string password = 2;
  string name = 3;
  uint64 inviter = 4;
  string email = 5;
}

message LoginInput {
  string mobile = 1;
  string password = 2;
}

message AuthOutput {
  string token = 1;
  User user = 2;
}

// friend - subtype of user with limited fields

message Friend {
  uint64 id = 1;
  string name = 2;
  string email = 3;
  string photoURL = 4;
  google.protobuf.Timestamp premiumTill = 5;
  repeated Wallet wallets = 6; // NOTICE send only public wallets
}

message MobilesChunk {
  ekipma.api.common.Chunk info = 1;
  repeated string mobiles = 2; // 100 mobiles per chunk
}

message FriendsChunk {
  ekipma.api.common.Chunk info = 1;
  repeated Friend friends = 2;
}

// wallets

enum WalletType {
  CUSTOM = 0;
  XNO = 1;
  TRX = 2;
  DOGE = 3;
  ADA = 4;
}

message Wallet {
  uint64 id = 1;    // - output
  uint64 owner = 2; // - output
  WalletType type = 3;
  string addr = 4;
  bool public = 5;  // visible to other users
  bool primary = 6; // sets as primary - input
}

message UpdateWalletOutput {
  User user = 1;    // updated user with his new wallet
  Wallet wDist = 2; // send my related wallet address
  float price = 3;
  bool needHash = 4; // whether the method needs tx hash
}

message CheckPremiumInput {
  WalletType type = 1;
  string hash = 2;
}

// game

enum AssetType {
  AssetUnkown = 0;
  AssetAvatarFrame = 1; // user avatar frame
  AssetCardSkin = 2;    // record-card, friend-card, notif-card
  AssetNotifSound = 3;  // sound of the notifs made by user
}

enum AvatarFrame {
  AvatarFrameNone = 0;
  AvatarFrameCrown = 1;
  AvatarFramePoo = 2;
  AvatarFrameHorn = 3;
  AvatarFrameNoise = 4; // shader
  AvatarFrameWave = 5;  // shader
  AvatarFrameFire = 6;  // just image for now... maybe shader in the future
}

enum CardSkin {
  CardSkinNone = 0;
  CardSkinBubbles = 1;
  CardSkinSpongeBob = 2;
  CardSkinPatrik = 3;
  CardSkinRickMorty = 4;
  CardSkinBlack = 5;
}

enum NotifSound {
  NotifSoundNone = 0;
  NotifSoundDefault = 1; // receiver default mobile rigntone
  NotifSoundFart = 2;
  NotifSOundYamete = 3;
}

message Asset {
  AssetType type = 1;
  bool active = 2; // only one asset of a type is active
  oneof value {
    AvatarFrame avatarFrame = 3;
    CardSkin cardSkin = 4;
    NotifSound notifSound = 5;
  }
}